package slaq.simple

import java.sql.{SQLException, Date, Time, Timestamp}
import slaq.session.PositionedParameters

/**
 * conversions for setting parameters in PositionedParameters.
 */
trait SetParameter[-T] extends ((T, PositionedParameters) => Unit)

object SetParameter {
  inline given SetBoolean: SetParameter[Boolean] with { def apply(v: Boolean, pp: PositionedParameters): Unit = { pp.setBoolean(v) } }
  inline given SetByte: SetParameter[Byte] with { def apply(v: Byte, pp: PositionedParameters): Unit = { pp.setByte(v) } }
  inline given SetDate: SetParameter[Date] with { def apply(v: Date, pp: PositionedParameters): Unit = { pp.setDate(v) } }
  inline given SetDouble: SetParameter[Double] with { def apply(v: Double, pp: PositionedParameters): Unit = { pp.setDouble(v) } }
  inline given SetFloat: SetParameter[Float] with { def apply(v: Float, pp: PositionedParameters): Unit = { pp.setFloat(v) } }
  inline given SetInt: SetParameter[Int] with { def apply(v: Int, pp: PositionedParameters): Unit = { pp.setInt(v) } }
  inline given SetLong: SetParameter[Long] with { def apply(v: Long, pp: PositionedParameters): Unit = { pp.setLong(v) } }
  inline given SetShort: SetParameter[Short] with { def apply(v: Short, pp: PositionedParameters): Unit = { pp.setShort(v) } }
  inline given SetString: SetParameter[String] with { def apply(v: String, pp: PositionedParameters): Unit = { pp.setString(v) } }
  inline given SetTime: SetParameter[Time] with { def apply(v: Time, pp: PositionedParameters): Unit = { pp.setTime(v) } }
  inline given SetTimestamp: SetParameter[Timestamp] with { def apply(v: Timestamp, pp: PositionedParameters): Unit = { pp.setTimestamp(v) } }

  inline given SetBooleanOption: SetParameter[Option[Boolean]] with { def apply(v: Option[Boolean], pp: PositionedParameters): Unit = { pp.setBooleanOption(v) } }
  inline given SetByteOption: SetParameter[Option[Byte]] with { def apply(v: Option[Byte], pp: PositionedParameters): Unit = { pp.setByteOption(v) } }
  inline given SetDateOption: SetParameter[Option[Date]] with { def apply(v: Option[Date], pp: PositionedParameters): Unit = { pp.setDateOption(v) } }
  inline given SetDoubleOption: SetParameter[Option[Double]] with { def apply(v: Option[Double], pp: PositionedParameters): Unit = { pp.setDoubleOption(v) } }
  inline given SetFloatOption: SetParameter[Option[Float]] with { def apply(v: Option[Float], pp: PositionedParameters): Unit = { pp.setFloatOption(v) } }
  inline given SetIntOption: SetParameter[Option[Int]] with { def apply(v: Option[Int], pp: PositionedParameters): Unit = { pp.setIntOption(v) } }
  inline given SetLongOption: SetParameter[Option[Long]] with { def apply(v: Option[Long], pp: PositionedParameters): Unit = { pp.setLongOption(v) } }
  inline given SetShortOption: SetParameter[Option[Short]] with { def apply(v: Option[Short], pp: PositionedParameters): Unit = { pp.setShortOption(v) } }
  inline given SetStringOption: SetParameter[Option[String]] with { def apply(v: Option[String], pp: PositionedParameters): Unit = { pp.setStringOption(v) } }
  inline given SetTimeOption: SetParameter[Option[Time]] with { def apply(v: Option[Time], pp: PositionedParameters): Unit = { pp.setTimeOption(v) } }
  inline given SetTimestampOption: SetParameter[Option[Timestamp]] with { def apply(v: Option[Timestamp], pp: PositionedParameters): Unit = { pp.setTimestampOption(v) } }

<#list 2..22 as i>
  given createSetTuple${i}[<#list 1..i as j>T${j}<#if i != j>, </#if></#list>](using <#list 1..i as j>c${j}: SetParameter[T${j}]<#if i != j>, </#if></#list>): SetParameter[(<#list 1..i as j>T${j}<#if i != j>, </#if></#list>)] = new SetParameter[(<#list 1..i as j>T${j}<#if i != j>, </#if></#list>)] {
    def apply(param: (<#list 1..i as j>T${j}<#if i != j>, </#if></#list>), pp: PositionedParameters): Unit = {
<#list 1..i as j>
      c${j}(param._${j}, pp)
</#list>
    }
  }
</#list>

  object SetSimpleProduct extends SetParameter[Product] {
    def apply(prod: Product, pp: PositionedParameters): Unit =
      for(i <- 0 until prod.productArity) prod.productElement(i) match {
        case v: Boolean => pp.setBoolean(v)
        case v: Byte => pp.setByte(v)
        case v: Date => pp.setDate(v)
        case v: Double => pp.setDouble(v)
        case v: Float => pp.setFloat(v)
        case v: Int => pp.setInt(v)
        case v: Long => pp.setLong(v)
        case v: Short => pp.setShort(v)
        case v: String => pp.setString(v)
        case v: Time => pp.setTime(v)
        case v: Timestamp => pp.setTimestamp(v)
        case v => throw new SQLException("SetProduct doesn't know how to handle parameter "+i+" ("+v+")")
      }
  }

  inline given SetUnit: SetParameter[Unit] with { def apply(none: Unit, pp: PositionedParameters): Unit = () }

  def apply[T](using f: (T, PositionedParameters) => Unit) = new SetParameter[T] {
    def apply(v: T, pp: PositionedParameters): Unit = f(v, pp)
  }
}
