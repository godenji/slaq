package slaq.simple

import java.sql.{Date, Time, Timestamp}
import slaq.Fail
import slaq.session.PositionedResult

/**
 * conversions for extracting values from PositionedResults.
 */
trait GetResult[+T] extends (PositionedResult => T) { self =>
  override def andThen[A](g: T => A): GetResult[A] = new GetResult[A] { def apply(rs: PositionedResult): A = g(self.apply(rs)) }
}

object GetResult {
  inline given GetBoolean: GetResult[Boolean] with { def apply(rs: PositionedResult) = rs.nextBoolean() }
  inline given GetByte: GetResult[Byte] with { def apply(rs: PositionedResult) = rs.nextByte() }
  inline given GetDate: GetResult[Date] with { def apply(rs: PositionedResult) = rs.nextDate() }
  inline given GetDouble: GetResult[Double] with { def apply(rs: PositionedResult) = rs.nextDouble() }
  inline given GetFloat: GetResult[Float] with { def apply(rs: PositionedResult) = rs.nextFloat() }
  inline given GetInt: GetResult[Int] with { def apply(rs: PositionedResult) = rs.nextInt() }
  inline given GetLong: GetResult[Long] with { def apply(rs: PositionedResult) = rs.nextLong() }
  inline given GetShort: GetResult[Short] with { def apply(rs: PositionedResult) = rs.nextShort() }
  inline given GetString: GetResult[String] with { def apply(rs: PositionedResult) = rs.nextString() }
  inline given GetTime: GetResult[Time] with { def apply(rs: PositionedResult) = rs.nextTime() }
  inline given GetTimestamp: GetResult[Timestamp] with { def apply(rs: PositionedResult) = rs.nextTimestamp() }

  inline given GetBooleanOption: GetResult[Option[Boolean]] with { def apply(rs: PositionedResult) = rs.nextBooleanOption() }
  inline given GetByteOption: GetResult[Option[Byte]] with { def apply(rs: PositionedResult) = rs.nextByteOption() }
  inline given GetDateOption: GetResult[Option[Date]] with { def apply(rs: PositionedResult) = rs.nextDateOption() }
  inline given GetDoubleOption: GetResult[Option[Double]] with { def apply(rs: PositionedResult) = rs.nextDoubleOption() }
  inline given GetFloatOption: GetResult[Option[Float]] with { def apply(rs: PositionedResult) = rs.nextFloatOption() }
  inline given GetIntOption: GetResult[Option[Int]] with { def apply(rs: PositionedResult) = rs.nextIntOption() }
  inline given GetLongOption: GetResult[Option[Long]] with { def apply(rs: PositionedResult) = rs.nextLongOption() }
  inline given GetShortOption: GetResult[Option[Short]] with { def apply(rs: PositionedResult) = rs.nextShortOption() }
  inline given GetStringOption: GetResult[Option[String]] with { def apply(rs: PositionedResult) = rs.nextStringOption() }
  inline given GetTimeOption: GetResult[Option[Time]] with { def apply(rs: PositionedResult) = rs.nextTimeOption() }
  inline given GetTimestampOption: GetResult[Option[Timestamp]] with { def apply(rs: PositionedResult) = rs.nextTimestampOption() }

<#list 2..22 as i>
  given createGetTuple${i}[<#list 1..i as j>T${j}<#if i != j>, </#if></#list>](using <#list 1..i as j>c${j}: GetResult[T${j}]<#if i != j>, </#if></#list>): GetResult[(<#list 1..i as j>T${j}<#if i != j>, </#if></#list>)] = new GetResult[(<#list 1..i as j>T${j}<#if i != j>, </#if></#list>)] {
    def apply(rs: PositionedResult) = (<#list 1..i as j>c${j}(rs)<#if i != j>, </#if></#list>)
  }
</#list>

  private[simple] object GetUpdateValue extends GetResult[Int] {
    def apply(pr: PositionedResult) =
      Fail("Update statements should not return a ResultSet")
  }

  def apply[T](f: (PositionedResult => T)) = new GetResult[T] { def apply(rs: PositionedResult) = f(rs) }
}
