package slaq.ql

import slaq.Fail
import slaq.ql.core.{Profile,QueryTemplate}

final class Params[P, C](c: C) {
  def flatMap[F](f: C => Query[_, F])(using profile: Profile): QueryTemplate[P, F] =
    profile.createQueryTemplate[P, F](f(c))

  def map[F](f: C => ColumnBase[F])(using profile: Profile): QueryTemplate[P, F] =
    profile.createQueryTemplate[P, F](Query(f(c)))

  def filter(f: C => Boolean): Params[P, C] = {
    if(!f(c)) Fail("Match failed when unpacking Params")
    else this
  }

  def withFilter(f: C => Boolean): Params[P, C] = filter(f)
}

object Params {
  def apply[P1 : TypeMapper] = new Params[P1, Column[P1]](new ParameterColumn(-1))
<#list 2..22 as i>

  def apply[<#list 1..i as j>P${j} : TypeMapper<#if i != j>, </#if></#list>] =
    new Params[(<#list 1..i as j>P${j}<#if i != j>,</#if></#list>), Projection${i}[<#list 1..i as j>P${j}<#if i != j>,</#if></#list>]](new Projection${i}(
<#list 1..i as j>
    new ParameterColumn[P${j}](${j-1})<#if i != j>,</#if>
</#list>  ))
</#list>
}
