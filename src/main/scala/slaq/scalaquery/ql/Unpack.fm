package slaq.ql

import scala.annotation.implicitNotFound
import slaq.util.{Node, ValueLinearizer, ProductLinearizer}

/**
 * A type class that encodes the unpacking `Packed => Unpacked` of a
 * `Query[Packed]` to its result element type `Unpacked`.
 *
 * At run-time, it provides the reification, `ValueLinearizer` of the
 * `Unpacked` type.
 *
 * =Example:=
 * - Packed: (Column[Int], Column[(Int, String)], (Int, Option[Double]))
 * - Unpacked: (Int, (Int, String), (Int, Option[Double]))
 * - Reified: (Column[Int], Column[(Int, String)], (Column[Int], Column[Option[Double]]))
 * - Linearized: (Int, Int, String, Int, Option[Double])
 */
@implicitNotFound(msg = "Don't know how to unpack ${r"${P}"} to ${r"${U}"}")
sealed trait Unpack[-P,U] {
  type Packed   = P @annotation.unchecked.uncheckedVariance
  type Unpacked = U

  // must return the reified type
  def reify(from: Packed): Any = from

  // must return an Unpack for the reified type
  def reifiedUnpack: Unpack[_, Unpacked] = this

  def linearizer(from: Packed): ValueLinearizer[_]

  def mapOp(x: Packed, f: Node => Node): Any // really returns x.type
}

object Unpack extends UnpackLowPriority {
  def unpackTable[T <: Table[_], U]: Unpack[T, U] = {
    new Unpack[T, U] {
      def linearizer(from: Packed): ValueLinearizer[_] = from
      def mapOp(from: Packed, f: Node => Node) = from.mapOp(f)
    }
  }
}

trait UnpackLowPriority extends UnpackLowPriority2 {
  inline given unpackColumnBase[T]: Unpack[ColumnBase[T], T] = {
    new Unpack[ColumnBase[T], T] {
      def linearizer(from: Packed): ValueLinearizer[_] = from
      def mapOp(from: Packed, f: Node => Node) = from.mapOp(f)
    }
  }

  inline given unpackPrimitive[T]
    (using TypeMapper[T]): Unpack[T, T] = {

    new Unpack[T, T] {
      override def reify(from: Packed) = ConstColumn(from)
      override def reifiedUnpack = unpackColumnBase[T]
      def linearizer(from: Packed): ValueLinearizer[_] = ConstColumn(from)
      def mapOp(from: Packed, f: Node => Node) = from
    }
  }
}

trait UnpackLowPriority2 {
<#list 2..22 as i>
  given unpackTuple${i}[<#list 1..i as j>T${j}<#if i != j>,</#if></#list>, <#list 1..i as j>U${j}<#if i != j>,</#if></#list>, <#list 1..i as j>R${j}<#if i != j>,</#if></#list>](using <#list 1..i as j>u${j}: Unpack[T${j}, U${j}]<#if i != j>, </#if></#list>): Unpack[(<#list 1..i as j>T${j}<#if i != j>,</#if></#list>), (<#list 1..i as j>U${j}<#if i != j>,</#if></#list>)] = new Unpack[(<#list 1..i as j>T${j}<#if i != j>,</#if></#list>), (<#list 1..i as j>U${j}<#if i != j>,</#if></#list>)] {
    override def reify(from: Packed) =
      (<#list 1..i as j>u${j}.reify(from._${j})<#if i != j>, </#if></#list>)
    override def reifiedUnpack: Unpack[_, Unpacked] =
      unpackTuple${i}(using <#list 1..i as j>u${j}.reifiedUnpack<#if i != j>, </#if></#list>)
    def linearizer(from: Packed) = {
      val sub = Vector(<#list 1..i as j>u${j}.linearizer(from._${j})<#if i != j>, </#if></#list>)
      new ProductLinearizer(sub)
    }
    def mapOp(from: Packed, f: Node => Node) =
      (<#list 1..i as j>u${j}.mapOp(from._${j}, f)<#if i != j>, </#if></#list>)
  }
</#list>
}

/**
 * A type class that encodes the reification `Packed => Reified` of a
 * `Query[Packed]` to a fully packed type `Reified`, i.e. a type where
 * everything which is not a transparent container is wrapped in a `Column[_]`.
 *
 * This needs to be defined in a separate typeclass but in lockstep with Unpack
 * because of limitations of Scala's type inferencer.
 *
 * =Example:=
 * - Packed: (Column[Int], Column[(Int, String)], (Int, Option[Double]))
 * - Reified: (Column[Int], Column[(Int, String)], (Column[Int], Column[Option[Double]]))
 */
@implicitNotFound(msg = "Don't know how to reify ${r"${P}"} to ${r"${R}"}")
sealed trait Reify[-P,R]

object Reify extends ReifyLowPriority {
  inline given [T <: ColumnBase[_]]: Reify[T, T] = null
}

trait ReifyLowPriority {
  inline given [T](using tm: TypeMapper[T]): Reify[T, ConstColumn[T]] = null

<#list 2..22 as i>
  given reifyTuple${i}[<#list 1..i as j>T${j}<#if i != j>,</#if></#list>, <#list 1..i as j>U${j}<#if i != j>,</#if></#list>, <#list 1..i as j>R${j}<#if i != j>,</#if></#list>](using <#list 1..i as j>u${j}: Reify[T${j}, R${j}]<#if i != j>, </#if></#list>): Reify[(<#list 1..i as j>T${j}<#if i != j>,</#if></#list>), (<#list 1..i as j>R${j}<#if i != j>,</#if></#list>)] = null
</#list>
}
